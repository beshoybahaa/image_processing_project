import cv2
import numpy as np
import matplotlib.pyplot as plt

# 1. Load the image
path = "Grayscale_MainAfter.jpg"
image = cv2.imread(path, cv2.IMREAD_GRAYSCALE)

# 2. Define Kirsch kernels
kernels = [
    np.array([[5,  5,  5],
              [-3, 0, -3],
              [-3, -3, -3]]),  # North

    np.array([[-3, -3,  5],
              [-3, 0,  5],
              [-3, -3,  5]]),  # Northeast

    np.array([[-3, -3, -3],
              [-3, 0, -3],
              [ 5,  5,  5]]),  # East

    np.array([[-3, -3, -3],
              [ 5, 0, -3],
              [ 5,  5, -3]]),  # Southeast

    np.array([[-3, -3, -3],
              [-3, 0, -3],
              [-3,  5,  5]]),  # South

    np.array([[ 5, -3, -3],
              [ 5, 0, -3],
              [ 5, -3, -3]]),  # Southwest

    np.array([[ 5,  5, -3],
              [ 5, 0, -3],
              [-3, -3, -3]]),  # West

    np.array([[-3,  5,  5],
              [-3, 0,  5],
              [-3, -3, -3]])   # Northwest
]

# 3. Apply Kirsch edge detection
edges = np.zeros_like(image, dtype=np.float32)

for kernel in kernels:
    filtered = cv2.filter2D(image, -1, kernel)
    print(filtered)
    edges = np.maximum(edges, filtered) # Take maximum response
    break

# 4. Normalize the result to 0-255
# edges = np.uint8(255 * edges / edges.max())

# # 5. Display the results
# plt.figure(figsize=(10, 5))
# plt.subplot(1, 2, 1)
# plt.title("Original Image")
# plt.imshow(image, cmap='gray')

# plt.subplot(1, 2, 2)
# plt.title("Kirsch Edge Detection")
# plt.imshow(edges, cmap='gray')

# plt.show()
